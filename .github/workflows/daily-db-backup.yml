name: Daily Database Backup

on:
  schedule:
    # 每天台北時間 02:00 AM 執行（UTC 18:00 前一天）
    - cron: '0 18 * * *'
  
  # 允許手動觸發
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Wrangler
        run: npm install -g wrangler@latest
      
      - name: Create backups directory
        run: mkdir -p timesheet-api/backups
      
      - name: Export D1 Database
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # 驗證環境變數
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "❌ Error: CLOUDFLARE_API_TOKEN is not set"
            exit 1
          fi
          
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "❌ Error: CLOUDFLARE_ACCOUNT_ID is not set"
            exit 1
          fi
          
          echo "✅ Environment variables are set"
          
          # 進入 timesheet-api 目錄，因為 wrangler.jsonc 在這裡
          cd timesheet-api
          
          # Export database
          echo "📦 Exporting database..."
          npx wrangler d1 export timesheet-db --remote --output=backups/daily-backup.sql
          
          # 同時保留時間戳記版本（供歷史追溯）
          echo "💾 Creating timestamped backup..."
          cp backups/daily-backup.sql "backups/backup-$TIMESTAMP.sql"
          
          echo "✅ Backup completed successfully"
      
      - name: Commit and Push Backup
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          git add timesheet-api/backups/daily-backup.sql
          git add timesheet-api/backups/backup-*.sql
          
          # 如果有變更才 commit
          if git diff --staged --quiet; then
            echo "資料庫無變更，跳過 commit"
          else
            git commit -m "chore: daily database backup $(date +%Y-%m-%d)"
            git push
          fi
      
      - name: Clean Old Backups (Keep Last 30 Days)
        run: |
          # 保留最新 30 個時間戳記備份檔
          cd timesheet-api/backups
          
          # 計算需要刪除的檔案數量
          BACKUP_COUNT=$(ls -1 backup-*.sql 2>/dev/null | wc -l)
          echo "📊 Total timestamped backups: $BACKUP_COUNT"
          
          if [ $BACKUP_COUNT -gt 30 ]; then
            echo "🧹 Cleaning old backups (keeping last 30)..."
            ls -t backup-*.sql | tail -n +31 | xargs -r rm
            echo "✅ Old backups cleaned"
          else
            echo "✅ No cleanup needed (less than 30 backups)"
          fi
          
          # 回到根目錄
          cd ../..
          
          # 提交清理結果
          git add timesheet-api/backups/
          if ! git diff --staged --quiet; then
            git commit -m "chore: cleanup old database backups"
            git push
          fi


