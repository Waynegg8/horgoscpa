name: 部落格與影片自動化處理

on:
  # 手動觸發
  workflow_dispatch:
    inputs:
      process_word:
        description: '處理Word文檔'
        required: true
        default: 'true'
        type: boolean
      update_json:
        description: '更新JSON文件'
        required: true
        default: 'true'
        type: boolean
      handle_deletion:
        description: '處理文章刪除'
        required: true
        default: 'true'
        type: boolean
      update_videos:
        description: '更新影片數據'
        required: true
        default: 'true'
        type: boolean
      force_scan:
        description: '強制掃描所有HTML文章'
        required: true
        default: 'false'
        type: boolean
      update_sitemap:
        description: '更新網站Sitemap'
        required: true
        default: 'true'
        type: boolean
      publish_scheduled:
        description: '發布排程文章'
        required: true
        default: 'true'
        type: boolean
      update_dictionary:
        description: '更新翻譯字典'
        required: true
        default: 'true'
        type: boolean
  
  # 當有任何文件變更時觸發
  push:
    paths:
      - '**/*'  # 任何文件變更都會觸發工作流
  
  # 當文章被刪除時觸發
  delete:
    paths:
      - 'blog/**/*.html'
      - 'services/**/*.html'
      - '*.html'
  
  # 每天定時執行
  schedule:
    - cron: '0 1 * * *'  # UTC 時間每天1點 (台灣時間9點)
    
  # 接收從網頁界面觸發的事件
  repository_dispatch:
    types: [delete-article, upload-article, scan-articles, update-video, update-sitemap, publish-scheduled, update-dictionary]

jobs:
  content-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
      # 1. 檢出代碼
      - name: 檢出代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 包含完整歷史記錄用於檢測刪除
          
      # 2. 設置 Git 配置
      - name: 設置 Git 配置
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      # 3. 設置 Python 環境
      - name: 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      
      # 4. 安裝依賴
      - name: 安裝依賴套件
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 5. 創建必要的目錄
      - name: 創建必要的目錄
        run: |
          mkdir -p blog
          mkdir -p assets/data
          mkdir -p assets/images/blog
          mkdir -p word-docs/processed
          mkdir -p video
          mkdir -p .github/scripts
          mkdir -p logs
          mkdir -p scripts

      # 6. 處理API觸發的文章刪除
      - name: 處理API觸發的文章刪除
        if: github.event_name == 'repository_dispatch' && github.event.action == 'delete-article'
        run: |
          echo "收到API觸發的文章刪除請求"
          echo "文件路徑: ${{ github.event.client_payload.file_path }}"
          echo "文章標題: ${{ github.event.client_payload.article_title }}"
          
          # 確保工作區乾淨
          git stash -u || true
          
          # 先拉取最新變更以避免衝突
          git pull origin ${GITHUB_REF##*/} || true
          
          # 應用stash (如果需要)
          git stash pop || true
          
          # 檢查文件是否存在
          if [ -f "${{ github.event.client_payload.file_path }}" ]; then
            # 刪除文件
            rm "${{ github.event.client_payload.file_path }}"
            echo "文件已刪除"
            
            # 提交變更
            git add -A
            git commit -m "透過API刪除文章: ${{ github.event.client_payload.article_title }}"
            git push
            echo "已提交刪除操作"
          else
            echo "警告: 找不到要刪除的文件 ${{ github.event.client_payload.file_path }}"
          fi

      # 7. 處理Word文檔 - 使用 main.py 統一處理
      - name: 處理Word文檔
        id: process_word
        if: github.event.inputs.process_word == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'upload-article') || (github.event_name == 'push' && contains(github.event.head_commit.modified, 'word-docs/'))
        run: |
          echo "===== 處理Word文檔步驟開始 ====="
          echo "觸發條件："
          echo "process_word input: ${{ github.event.inputs.process_word }}"
          echo "event_name: ${{ github.event_name }}"
          echo "event.action: ${{ github.event.action }}"
          
          echo "檢查工作環境："
          echo "當前工作目錄："
          pwd
          echo "根目錄內容："
          ls -la
          
          echo "檢查word-docs目錄："
          if [ -d "word-docs" ]; then
            echo "✅ word-docs目錄存在"
            echo "word-docs目錄內容："
            ls -la word-docs/
            
            # 檢查是否有Word文檔
            echo "搜尋.docx文件..."
            find word-docs -maxdepth 1 -type f -name "*.docx" -ls
            
            DOCX_FILES=$(find word-docs -maxdepth 1 -type f -name "*.docx")
            DOCX_COUNT=$(echo "$DOCX_FILES" | grep -c "\.docx$" || echo "0")
            echo "找到 $DOCX_COUNT 個 .docx 文件"
            
            if [ "$DOCX_COUNT" -gt 0 ]; then
              echo "列出所有待處理的Word文檔："
              echo "$DOCX_FILES"
              
              echo "開始處理word-docs目錄中的Word文檔..."
              echo "執行命令: python main.py --word-dir word-docs --output-dir blog --assets-dir assets --debug"
              
              # 使用main.py執行完整的文檔處理流程
              python main.py --word-dir word-docs --output-dir blog --assets-dir assets --debug
              
              # 檢查處理結果
              PROCESS_RESULT=$?
              echo "處理結果返回碼: $PROCESS_RESULT"
              
              if [ $PROCESS_RESULT -eq 0 ]; then
                echo "✅ Word文檔處理成功"
                echo "html_changed=true" >> $GITHUB_OUTPUT
                
                # 立即提交更新後的翻譯字典 - 在Word處理完成後立即執行
                echo "提交更新後的翻譯字典..."
                git add assets/data/translation_dict.json || true
                git commit -m "更新翻譯字典 (Word處理後)" || echo "無需提交翻譯字典"
                git push || echo "無需推送翻譯字典"
              else
                echo "❌ Word文檔處理失敗，請檢查日誌"
                echo "html_changed=false" >> $GITHUB_OUTPUT
                # 不退出工作流程，以便其他步驟可以繼續執行
                # exit 1
              fi
            else
              echo "⚠️ word-docs 目錄中沒有 .docx 文件，跳過處理"
              echo "html_changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ word-docs 目錄不存在，跳過處理"
            echo "html_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # 檢查logs目錄是否有日誌文件
          if [ -d "logs" ]; then
            echo "logs目錄內容："
            ls -la logs/
          fi
          
          echo "===== 處理Word文檔步驟結束 ====="

      # 8. 上傳並提交轉換後的 HTML
      - name: 上傳並提交轉換後的 HTML
        if: steps.process_word.outputs.html_changed == 'true'
        run: |
          # 檢查是否有新的文件變更
          git status
          
          # 添加新的HTML文件
          git add blog/*.html
          
          # 檢查是否有變更的文件
          CHANGED_FILES=$(git diff --name-only --cached | grep -c ".html" || echo "0")
          echo "檢測到 $CHANGED_FILES 個變更的HTML文件"
          
          if [ "$CHANGED_FILES" -gt "0" ]; then
            echo "提交轉換後的HTML文件"
            git commit -m "提交轉換後的 HTML 文件"
            git push
          else
            echo "沒有新的HTML文件需要提交"
            # 重置已添加的文件（如果有）
            git reset HEAD blog/*.html
          fi
          
      # 9. 檢查是否有文章被刪除
      - name: 檢查是否有文章被刪除
        id: check_deleted
        if: github.event.inputs.handle_deletion == 'true' || github.event_name == 'delete'
        run: |
          echo "檢查是否有文章被刪除..."
          
          # 檢查最近的提交是否有刪除的HTML文件
          DELETED_FILES=$(git log --diff-filter=D --name-only -n 1 | grep -c "blog.*\.html" || echo "0")
          echo "檢測到 $DELETED_FILES 個被刪除的HTML文件"
          
          if [ "$DELETED_FILES" -gt "0" ]; then
            echo "html_deleted=true" >> $GITHUB_OUTPUT
          else
            echo "html_deleted=false" >> $GITHUB_OUTPUT
          fi
      
      # 10. 更新博客JSON文件 - 使用獨立腳本
      - name: 更新博客JSON文件
        id: update_blog_json
        if: steps.process_word.outputs.html_changed == 'true' || github.event.inputs.update_json == 'true' || github.event_name == 'schedule' || steps.check_deleted.outputs.html_deleted == 'true' || (github.event_name == 'repository_dispatch' && (github.event.action == 'delete-article' || github.event.action == 'upload-article' || github.event.action == 'scan-articles' || github.event.action == 'publish-scheduled'))
        run: |
          echo "開始更新博客JSON文件..."
          
          # 執行現有的更新腳本
          python .github/scripts/update_blog_json.py
          
          echo "博客JSON文件更新完成"
          echo "blog_json_updated=true" >> $GITHUB_OUTPUT
          
          # 提交更新後的JSON文件
          git add assets/data/blog-posts.json assets/data/blog-index.json assets/data/latest-posts.json assets/data/series.json
          git commit -m "更新博客JSON文件" || echo "無需提交JSON文件"
          git push || echo "無需推送"

      # 11. 更新影片數據
      - name: 更新影片數據
        id: update_videos
        if: github.event.inputs.update_videos == 'true' || (github.event_name == 'push' && contains(github.event.head_commit.modified, 'video/videos.txt')) || (github.event_name == 'repository_dispatch' && github.event.action == 'update-video')
        run: |
          echo "檢測到需要更新影片數據"
          
          # 檢查video資料夾是否存在videos.txt
          if [ -f "video/videos.txt" ]; then
            echo "找到 video/videos.txt，準備更新影片數據"
            
            # 執行update_videos.py腳本
            python .github/scripts/update_videos.py
            echo "videos_updated=true" >> $GITHUB_OUTPUT
            
            # 提交更新後的影片JSON文件
            git add assets/data/videos.json
            git commit -m "更新影片JSON數據" || echo "無需提交影片JSON"
            git push || echo "無需推送"
          else
            echo "警告: 找不到 video/videos.txt 文件"
            echo "videos_updated=false" >> $GITHUB_OUTPUT
          fi

      # 12. 清理已處理的Word文檔
      - name: 清理已處理的Word文檔
        if: steps.process_word.outputs.html_changed == 'true'
        run: |
          # 確保工作區乾淨
          git stash -u || true
          
          # 先拉取最新變更以避免衝突
          git pull origin ${GITHUB_REF##*/} || true
          
          # 應用stash (如果需要)
          git stash pop || true
          
          # 檢查是否有文件需要移動
          if [ -d "word-docs" ] && [ "$(find word-docs -maxdepth 1 -type f -name "*.docx" | wc -l)" -gt 0 ]; then
            # 移動已處理的文件到processed目錄
            find word-docs -maxdepth 1 -type f -name "*.docx" -exec mv {} word-docs/processed/ \;
            
            # 提交更改
            git add word-docs/
            git commit -m "移動已處理的Word文檔" || echo "無需提交"
            git push || echo "無需推送"
          else
            echo "沒有需要處理的 Word 文檔"
          fi
      
      # 13. 更新網站 Sitemap
      - name: 更新網站 Sitemap
        id: update_sitemap
        if: github.event.inputs.update_sitemap == 'true' || github.event_name == 'schedule' || (github.event_name == 'repository_dispatch' && github.event.action == 'update-sitemap') || steps.process_word.outputs.html_changed == 'true' || steps.update_blog_json.outputs.blog_json_updated == 'true'
        run: |
          echo "開始更新網站 Sitemap..."
          
          # 生成並提交新的 sitemap.xml 文件
          python .github/scripts/generate_sitemap.py
          
          # 檢查文件是否存在並提交
          if [ -f "sitemap.xml" ]; then
            git add sitemap.xml sitemap_index.xml video-sitemap.xml || true
            git commit -m "更新網站Sitemap" || echo "無需提交 Sitemap"
            git push || echo "無需推送 Sitemap"
          else
            echo "警告: sitemap.xml 文件不存在或生成失敗"
          fi
          
      # 14. 更新翻譯字典 (如果有變更)
      - name: 更新翻譯字典
        if: github.event.inputs.update_dictionary == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'update-dictionary')
        run: |
          echo "檢查並更新翻譯字典..."
          
          # 使用 translator.py 匯出目前翻譯字典
          python -c "import sys; sys.path.append('scripts'); from translator import get_translator; translator = get_translator(); translator.export_dictionary('assets/data/translation_dict_export.json')"
          
          # 提交更新後的翻譯字典
          git add assets/data/translation_dict.json assets/data/translation_dict_export.json || true
          git commit -m "更新翻譯字典" || echo "無需提交翻譯字典"
          git push || echo "無需推送翻譯字典"
      
      # 15. 結果通知
      - name: 工作流執行結果通知
        run: |
          echo "工作流程完成執行"
          echo "時間: $(date)"
          
          # 可以在這裡添加其他通知方式，如發送郵件或Slack通知
          # 例如使用curl發送webhook通知等