name: 部落格自動化處理

on:
  workflow_dispatch:
    inputs:
      process_word:
        description: '處理Word文檔'
        required: true
        default: 'true'
        type: boolean
      update_json:
        description: '更新JSON文件'
        required: true
        default: 'true'
        type: boolean
      force_process:
        description: '強制重新處理所有文件'
        required: false
        default: 'false'
        type: boolean
      debug_mode:
        description: '啟用調試模式'
        required: false
        default: 'false'
        type: boolean
  
  push:
    paths:
      - 'word-docs/**/*.docx'
      - 'scripts/**/*.py'
      - '.github/workflows/blog-automation.yml'
  
  schedule:
    - cron: '0 1 * * *'  # 每天凌晨1點執行

env:
  PYTHON_VERSION: '3.11'
  DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}

jobs:
  blog-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      pages: write
      id-token: write
    
    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 設置 Git 配置
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global core.autocrlf false
          git config --global core.filemode false
      
      - name: 設置 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 創建並修復項目結構
        run: |
          echo "=== 創建基本目錄結構 ==="
          mkdir -p {blog,assets/{data,images/blog},word-docs/processed,video,logs,scripts}
          
          echo "=== 創建必要的模組文件 ==="
          cat > utils.py << 'EOF'
          #!/usr/bin/env python
          # -*- coding: utf-8 -*-
          import os
          import json
          import logging
          import re
          from pathlib import Path
          from datetime import datetime
          from loguru import logger
          
          def setup_logging(log_level=logging.INFO):
              logger.remove()
              logger.add(
                  sink=lambda msg: print(msg, end=''),
                  level=log_level,
                  format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | {message}"
              )
              return logger
          
          def ensure_directories(directories):
              for name, path in directories.items():
                  dir_path = Path(path)
                  if not dir_path.exists():
                      dir_path.mkdir(parents=True, exist_ok=True)
          
          def read_json(file_path, default=None):
              path = Path(file_path)
              if not path.exists():
                  return default if default is not None else {}
              try:
                  with open(path, 'r', encoding='utf-8') as f:
                      return json.load(f)
              except Exception as e:
                  return default if default is not None else {}
          
          def write_json(file_path, data, indent=2):
              path = Path(file_path)
              path.parent.mkdir(parents=True, exist_ok=True)
              try:
                  with open(path, 'w', encoding='utf-8') as f:
                      json.dump(data, f, ensure_ascii=False, indent=indent)
              except Exception as e:
                  raise
          
          def parse_filename(filename):
              name_without_ext = os.path.splitext(filename)[0]
              series_pattern = r'^(\d{4}-\d{2}-\d{2})-(.+)EP(\d+)-(.+)$'
              normal_pattern = r'^(\d{4}-\d{2}-\d{2})-(.+)$'
              
              series_match = re.match(series_pattern, name_without_ext)
              if series_match:
                  date_str, series_name, episode_str, title = series_match.groups()
                  return {
                      'date': date_str,
                      'is_series': True,
                      'series_name': series_name,
                      'episode': int(episode_str),
                      'title': title
                  }
              
              normal_match = re.match(normal_pattern, name_without_ext)
              if normal_match:
                  date_str, title = normal_match.groups()
                  return {
                      'date': date_str,
                      'is_series': False,
                      'title': title
                  }
              return None
          
          def sanitize_filename(text):
              illegal_chars = r'[\\/:*?"<>|]'
              return re.sub(illegal_chars, '', text)
          EOF
          
          echo "✓ utils.py 創建完成"
      
      - name: 安裝Python依賴
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # 安裝必要的套件
          pip install loguru python-docx beautifulsoup4 requests jieba
          
          # 如果有requirements.txt則安裝
          if [ -f "requirements.txt" ]; then
            echo "安裝requirements.txt中的依賴..."
            pip install -r requirements.txt || echo "部分requirements安裝失敗，繼續執行"
          fi
          
          # 驗證安裝
          python -c "
          try:
              import loguru, docx, bs4, requests, jieba
              print('✓ 所有必要套件安裝成功')
          except ImportError as e:
              print(f'✗ 套件安裝驗證失敗: {e}')
              exit(1)
          "

      - name: 初始化配置文件
        run: |
          echo "=== 初始化配置文件 ==="
          
          # 創建翻譯字典
          cat > assets/data/translation_dict.json << 'EOF'
          {
            "translations": {
              "稅務": "tax",
              "保險": "insurance", 
              "會計": "accounting",
              "企業": "business",
              "投資": "investment",
              "理財": "financial-planning",
              "節稅": "tax-saving",
              "規劃": "planning",
              "申報": "filing",
              "法規": "regulation"
            },
            "last_updated": null
          }
          EOF
          
          # 創建已處理文件記錄
          cat > assets/data/processed_files.json << 'EOF'
          {
            "files": []
          }
          EOF
          
          # 創建分類配置
          cat > assets/data/categories.json << 'EOF'
          {
            "categories": [
              {"slug": "tax", "name": "稅務相關", "count": 0},
              {"slug": "insurance", "name": "保險規劃", "count": 0},
              {"slug": "accounting", "name": "會計實務", "count": 0},
              {"slug": "business", "name": "企業服務", "count": 0}
            ]
          }
          EOF
          
          # 創建標籤配置
          cat > assets/data/tags.json << 'EOF'
          {
            "tags": []
          }
          EOF
          
          # 創建關鍵詞字典
          cat > assets/data/keyword_dict.json << 'EOF'
          {
            "categories": {
              "tax": {
                "name": "稅務相關",
                "keywords": ["稅務", "稅法", "報稅", "節稅", "所得稅", "營業稅", "遺產稅", "贈與稅"]
              },
              "insurance": {
                "name": "保險規劃", 
                "keywords": ["保險", "保單", "受益人", "要保人", "人壽保險", "保險給付"]
              },
              "accounting": {
                "name": "會計實務",
                "keywords": ["會計", "帳務", "財報", "審計", "記帳", "財務"]
              },
              "business": {
                "name": "企業服務",
                "keywords": ["企業", "公司", "營運", "投資", "創業", "管理"]
              }
            },
            "tags": {
              "planning": {"name": "規劃", "keywords": ["規劃", "策略", "方案"]},
              "filing": {"name": "申報", "keywords": ["申報", "申請", "處理"]},
              "regulation": {"name": "法規", "keywords": ["法規", "法律", "條文", "辦法"]}
            }
          }
          EOF
          
          # 創建模板配置
          cat > assets/data/templates.json << 'EOF'
          {
            "navbar": "<!-- 導航欄模板 -->",
            "mobile_nav": "<!-- 移動導航模板 -->", 
            "footer": "<!-- 頁尾模板 -->",
            "meta": {
              "favicon": "<link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\">"
            },
            "scripts": {
              "basic": "<script>console.log('基本腳本載入');</script>",
              "progress_indicator": "<script>console.log('進度指示器載入');</script>"
            }
          }
          EOF
          
          echo "✓ 配置文件初始化完成"

      - name: 檢查Word文檔
        id: check_word_docs
        run: |
          echo "=== 檢查Word文檔 ==="
          
          if [ -d "word-docs" ]; then
            DOCX_COUNT=$(find word-docs -maxdepth 1 -name "*.docx" ! -name "~$*" 2>/dev/null | wc -l)
            DOC_COUNT=$(find word-docs -maxdepth 1 -name "*.doc" ! -name "~$*" 2>/dev/null | wc -l)
            TOTAL_COUNT=$((DOCX_COUNT + DOC_COUNT))
            
            echo "找到 .docx 文件: $DOCX_COUNT 個"
            echo "找到 .doc 文件: $DOC_COUNT 個"
            echo "總計Word文檔: $TOTAL_COUNT 個"
            
            if [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "has_word_docs=true" >> $GITHUB_OUTPUT
              echo "word_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT
              
              # 列出所有Word文檔
              echo "Word文檔列表:"
              find word-docs -maxdepth 1 \( -name "*.docx" -o -name "*.doc" \) ! -name "~$*" | sort
            else
              echo "has_word_docs=false" >> $GITHUB_OUTPUT
              echo "word_count=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "word-docs 目錄不存在"
            echo "has_word_docs=false" >> $GITHUB_OUTPUT
            echo "word_count=0" >> $GITHUB_OUTPUT
          fi

      - name: 處理Word文檔
        id: process_word
        if: |
          (github.event.inputs.process_word == 'true' || github.event.inputs.process_word == '' || github.event_name != 'workflow_dispatch') &&
          (steps.check_word_docs.outputs.has_word_docs == 'true' || github.event.inputs.force_process == 'true')
        run: |
          echo "=== 開始處理Word文檔 ==="
          
          # 設置Python路徑
          export PYTHONPATH="$(pwd):$PYTHONPATH"
          
          # 構建處理參數
          PROCESS_ARGS="--word-dir word-docs --output-dir blog --assets-dir assets"
          
          if [ "${{ github.event.inputs.force_process }}" = "true" ]; then
            PROCESS_ARGS="$PROCESS_ARGS --force --process-all"
            echo "強制處理模式啟用"
          fi
          
          if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
            PROCESS_ARGS="$PROCESS_ARGS --debug"
            echo "調試模式啟用"
          fi
          
          # 檢查主處理腳本是否存在並嘗試執行
          PROCESSING_SUCCESS=false
          
          if [ -f "main.py" ]; then
            echo "嘗試使用主處理腳本 main.py"
            
            # 執行主要處理（添加錯誤容錯）
            if timeout 300 python main.py $PROCESS_ARGS 2>&1; then
              echo "主要處理成功完成"
              PROCESSING_SUCCESS=true
            else
              echo "主要處理失敗或超時，將使用備用處理方案"
              PROCESSING_SUCCESS=false
            fi
          else
            echo "main.py 不存在，直接使用備用處理方案"
            PROCESSING_SUCCESS=false
          fi
          
          # 備用處理方案
          if [ "$PROCESSING_SUCCESS" = "false" ]; then
            echo "執行備用Word文檔處理方案..."
            
            python3 << 'EOF'
          import os
          import json
          from pathlib import Path
          from datetime import datetime
          import re
          
          try:
              print("開始備用Word文檔處理...")
              
              # 簡單的Word文檔處理
              word_dir = Path('word-docs')
              blog_dir = Path('blog')
              blog_dir.mkdir(exist_ok=True)
              
              processed_count = 0
              processed_files = []
              
              if word_dir.exists():
                  for doc_file in word_dir.glob('*.docx'):
                      if doc_file.name.startswith('~

      - name: 更新影片數據
        id: update_videos
        run: |
          echo "=== 更新影片數據 ==="
          
          # 檢查影片更新腳本是否存在
          if [ -f "update_videos.py" ] || [ -f ".github/scripts/update_videos.py" ]; then
            echo "執行影片數據更新..."
            
            # 嘗試執行影片更新腳本
            if [ -f "update_videos.py" ]; then
              python update_videos.py || echo "影片更新腳本執行失敗"
            elif [ -f ".github/scripts/update_videos.py" ]; then
              python .github/scripts/update_videos.py || echo "影片更新腳本執行失敗"
            fi
          else
            echo "創建基本影片數據..."
            
            # 創建基本的影片數據
            cat > assets/data/videos.json << 'EOF'
          {
            "videos": [],
            "pagination": {
              "total": 0,
              "totalPages": 1,
              "itemsPerPage": 6
            }
          }
          EOF
          fi
          
          echo "videos_updated=true" >> $GITHUB_OUTPUT

      - name: 更新JSON數據文件
        id: update_json
        if: |
          steps.process_word.outputs.html_changed == 'true' || 
          github.event.inputs.update_json == 'true' || 
          github.event.inputs.update_json == '' ||
          github.event_name != 'workflow_dispatch'
        run: |
          echo "=== 更新JSON數據文件 ==="
          
          # 設置Python路徑
          export PYTHONPATH="$(pwd):$PYTHONPATH"
          
          # 嘗試使用JSON生成器
          if [ -f "json_generator.py" ] || [ -f ".github/scripts/update_blog_json.py" ]; then
            echo "使用專用JSON生成器..."
            
            if [ -f ".github/scripts/update_blog_json.py" ]; then
              python .github/scripts/update_blog_json.py
            elif [ -f "json_generator.py" ]; then
              python -c "
          from json_generator import JsonGenerator
          generator = JsonGenerator('assets/data')
          result = generator.generate_all_json()
          print('JSON生成完成')
          "
            fi
          else
            echo "使用內建JSON生成器..."
          fi
          
          # 生成基本的博客數據
          python3 -c "
          import os
          import json
          from datetime import datetime
          from pathlib import Path
          
          # 掃描HTML文件
          blog_dir = Path('blog')
          posts = []
          
          if blog_dir.exists():
              for html_file in sorted(blog_dir.glob('*.html'), reverse=True):
                  filename = html_file.stem
                  
                  # 解析文件名獲取基本信息
                  parts = filename.split('-')
                  if len(parts) >= 3:
                      try:
                          date_str = '-'.join(parts[:3])
                          datetime.strptime(date_str, '%Y-%m-%d')  # 驗證日期格式
                          title = ' '.join(parts[3:]).replace('-', ' ').title()
                      except ValueError:
                          date_str = datetime.now().strftime('%Y-%m-%d')
                          title = filename.replace('-', ' ').title()
                  else:
                      date_str = datetime.now().strftime('%Y-%m-%d')
                      title = filename.replace('-', ' ').title()
                  
                  post = {
                      'title': title,
                      'url': '/blog/' + filename,
                      'date': date_str,
                      'summary': f'{title} 的詳細說明...',
                      'category': 'tax',
                      'category_name': '稅務相關',
                      'tags': [{'name': '稅務', 'slug': 'tax'}],
                      'image': '/assets/images/blog/default.jpg',
                      'is_series': False
                  }
                  posts.append(post)
          
          # 生成博客索引
          blog_data = {
              'posts': posts,
              'pagination': {
                  'total_posts': len(posts),
                  'total_pages': max(1, (len(posts) + 9) // 10),
                  'items_per_page': 10
              },
              'categories': [
                  {'slug': 'tax', 'name': '稅務相關', 'count': len(posts)}
              ],
              'tags': [
                  {'slug': 'tax', 'name': '稅務', 'count': len(posts)}
              ],
              'series': {},
              'series_list': [],
              'generated_time': datetime.now().isoformat()
          }
          
          # 確保目錄存在
          Path('assets/data').mkdir(parents=True, exist_ok=True)
          
          # 保存各種JSON文件
          json_files = {
              'assets/data/blog_posts.json': {'posts': posts},
              'assets/data/blog-posts.json': {'posts': posts},
              'assets/data/blog-index.json': blog_data,
              'assets/data/latest-posts.json': posts[:3],
              'assets/data/series.json': {'series': {}, 'series_list': []},
              'assets/data/categories.json': {'categories': blog_data['categories']},
              'assets/data/tags.json': {'tags': blog_data['tags']}
          }
          
          for file_path, data in json_files.items():
              with open(file_path, 'w', encoding='utf-8') as f:
                  json.dump(data, f, ensure_ascii=False, indent=2)
          
          print(f'JSON數據更新完成，共處理 {len(posts)} 篇文章')
          "
          
          echo "blog_json_updated=true" >> $GITHUB_OUTPUT

      - name: 生成網站地圖
        id: generate_sitemap
        if: steps.update_json.outputs.blog_json_updated == 'true'
        run: |
          echo "=== 生成網站地圖 ==="
          
          # 檢查是否有專用的網站地圖生成器
          if [ -f "generate_sitemap.py" ] || [ -f ".github/scripts/generate_sitemap.py" ]; then
            echo "使用專用網站地圖生成器..."
            
            if [ -f "generate_sitemap.py" ]; then
              python generate_sitemap.py
            elif [ -f ".github/scripts/generate_sitemap.py" ]; then
              python .github/scripts/generate_sitemap.py
            fi
          else
            echo "生成基本網站地圖..."
            
            python3 -c "
          from datetime import datetime
          from pathlib import Path
          
          # 生成基本sitemap
          sitemap_content = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>
          <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">
            <url>
              <loc>https://www.horgoscpa.com/</loc>
              <lastmod>''' + datetime.now().strftime('%Y-%m-%d') + '''</lastmod>
              <changefreq>daily</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>https://www.horgoscpa.com/blog.html</loc>
              <lastmod>''' + datetime.now().strftime('%Y-%m-%d') + '''</lastmod>
              <changefreq>daily</changefreq>
              <priority>0.9</priority>
            </url>'''
          
          # 添加博客文章
          blog_dir = Path('blog')
          if blog_dir.exists():
              for html_file in blog_dir.glob('*.html'):
                  sitemap_content += f'''
            <url>
              <loc>https://www.horgoscpa.com/blog/{html_file.name}</loc>
              <lastmod>{datetime.now().strftime(\"%Y-%m-%d\")}</lastmod>
              <changefreq>weekly</changefreq>
              <priority>0.8</priority>
            </url>'''
          
          sitemap_content += '''
          </urlset>'''
          
          # 保存sitemap
          with open('sitemap.xml', 'w', encoding='utf-8') as f:
              f.write(sitemap_content)
          
          print('網站地圖生成完成')
          "
          fi
          
          echo "sitemap_generated=true" >> $GITHUB_OUTPUT

      - name: 移動已處理的Word文檔
        id: move_processed
        if: steps.process_word.outputs.html_changed == 'true'
        run: |
          echo "=== 移動已處理的Word文檔 ==="
          
          # 確保processed目錄存在
          mkdir -p word-docs/processed
          
          # 使用內建移動邏輯（不依賴外部腳本）
          python3 << 'EOF'
          import json
          import shutil
          from pathlib import Path
          
          try:
              # 載入已處理文件記錄
              processed_files_path = Path('assets/data/processed_files.json')
              processed_files = {'files': []}
              
              if processed_files_path.exists():
                  try:
                      with open(processed_files_path, 'r', encoding='utf-8') as f:
                          processed_files = json.load(f)
                  except Exception as e:
                      print(f'讀取已處理文件記錄失敗: {e}')
              
              # 移動已處理的Word文檔
              word_dir = Path('word-docs')
              processed_dir = Path('word-docs/processed')
              processed_dir.mkdir(exist_ok=True)
              
              moved_count = 0
              if word_dir.exists():
                  for doc_file in word_dir.glob('*.docx'):
                      if doc_file.name.startswith('~

      - name: 提交所有更改
        if: |
          steps.process_word.outputs.html_changed == 'true' || 
          steps.update_json.outputs.blog_json_updated == 'true' ||
          steps.generate_sitemap.outputs.sitemap_generated == 'true' ||
          steps.move_processed.outputs.processed_moved == 'true'
        run: |
          echo "=== 提交所有更改 ==="
          
          # 檢查Git狀態
          git status
          
          # 添加所有更改
          git add -A
          
          # 檢查是否有更改需要提交
          if git diff --cached --quiet; then
            echo "沒有更改需要提交"
          else
            # 生成提交訊息
            COMMIT_MSG="自動處理更新 [$(date +'%Y-%m-%d %H:%M:%S')]"
            
            if [ "${{ steps.process_word.outputs.html_changed }}" = "true" ]; then
              HTML_COUNT="${{ steps.process_word.outputs.html_count }}"
              COMMIT_MSG="${COMMIT_MSG} - 處理Word文檔($HTML_COUNT個)"
            fi
            
            if [ "${{ steps.update_json.outputs.blog_json_updated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新JSON數據"
            fi
            
            if [ "${{ steps.generate_sitemap.outputs.sitemap_generated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新網站地圖"
            fi
            
            if [ "${{ steps.move_processed.outputs.processed_moved }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 移動已處理文檔"
            fi
            
            # 提交更改
            git commit -m "$COMMIT_MSG"
            
            # 推送更改，加入重試機制
            MAX_RETRIES=3
            for i in $(seq 1 $MAX_RETRIES); do
              if git push origin ${{ github.ref_name }}; then
                echo "✓ 成功推送更改"
                break
              else
                echo "✗ 推送失敗，第 $i 次重試..."
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "推送失敗，已達最大重試次數"
                  exit 1
                fi
                sleep 5
                git pull --rebase origin ${{ github.ref_name }} || true
              fi
            done
          fi

      - name: 輸出執行結果
        if: always()
        run: |
          echo "=============================="
          echo "       執行結果摘要"
          echo "=============================="
          echo "執行時間: $(date)"
          echo "觸發方式: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手動觸發參數:"
            echo "  - 處理Word文檔: ${{ github.event.inputs.process_word }}"
            echo "  - 更新JSON文件: ${{ github.event.inputs.update_json }}"
            echo "  - 強制處理: ${{ github.event.inputs.force_process }}"
            echo "  - 調試模式: ${{ github.event.inputs.debug_mode }}"
          fi
          
          echo ""
          echo "處理結果:"
          echo "  - Word文檔檢查: ${{ steps.check_word_docs.outputs.has_word_docs == 'true' && '✓' || '✗' }} (發現 ${{ steps.check_word_docs.outputs.word_count || '0' }} 個文檔)"
          echo "  - Word文檔處理: ${{ steps.process_word.outputs.html_changed == 'true' && '✓' || '✗' }} (生成 ${{ steps.process_word.outputs.html_count || '0' }} 個HTML)"
          echo "  - 影片數據更新: ${{ steps.update_videos.outputs.videos_updated == 'true' && '✓' || '✗' }}"
          echo "  - JSON數據更新: ${{ steps.update_json.outputs.blog_json_updated == 'true' && '✓' || '✗' }}"
          echo "  - 網站地圖生成: ${{ steps.generate_sitemap.outputs.sitemap_generated == 'true' && '✓' || '✗' }}"
          echo "  - 文檔移動: ${{ steps.move_processed.outputs.processed_moved == 'true' && '✓' || '✗' }}"
          
          echo ""
          echo "文件統計:"
          echo "  - HTML文件數量: $(find blog -name "*.html" 2>/dev/null | wc -l)"
          echo "  - JSON文件數量: $(find assets/data -name "*.json" 2>/dev/null | wc -l)"
          echo "  - 待處理Word文檔: $(find word-docs -maxdepth 1 -name "*.docx" ! -name "~$*" 2>/dev/null | wc -l)"
          echo "  - 已處理Word文檔: $(find word-docs/processed -name "*.docx" 2>/dev/null | wc -l)"
          
          echo ""
          echo "=============================="

      - name: 清理臨時文件
        if: always()
        run: |
          echo "=== 清理臨時文件 ==="
          
          # 清理Python緩存
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          
          # 清理Word臨時文件
          find . -name "~$*.docx" -delete 2>/dev/null || true
          find . -name "~$*.doc" -delete 2>/dev/null || true
          
          # 清理日誌文件（保留最新的）
          if [ -d "logs" ]; then
            find logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
          fi
          
          echo "臨時文件清理完成"):
                          continue
                      
                      # 檢查文件是否在已處理列表中
                      file_path_str = str(doc_file)
                      if file_path_str in processed_files.get('files', []):
                          try:
                              # 移動到processed目錄
                              dest_path = processed_dir / doc_file.name
                              if not dest_path.exists():
                                  shutil.move(str(doc_file), str(dest_path))
                                  print(f'已移動: {doc_file.name} -> processed/{doc_file.name}')
                                  moved_count += 1
                              else:
                                  print(f'目標文件已存在，刪除源文件: {doc_file.name}')
                                  doc_file.unlink()
                                  moved_count += 1
                          except Exception as e:
                              print(f'移動文件失敗 {doc_file.name}: {e}')
              
              print(f'共處理 {moved_count} 個已處理的Word文檔')
              
          except Exception as e:
              print(f'移動處理過程出錯: {e}')
          EOF
          
          echo "processed_moved=true" >> $GITHUB_OUTPUT

      - name: 提交所有更改
        if: |
          steps.process_word.outputs.html_changed == 'true' || 
          steps.update_json.outputs.blog_json_updated == 'true' ||
          steps.generate_sitemap.outputs.sitemap_generated == 'true' ||
          steps.move_processed.outputs.processed_moved == 'true'
        run: |
          echo "=== 提交所有更改 ==="
          
          # 檢查Git狀態
          git status
          
          # 添加所有更改
          git add -A
          
          # 檢查是否有更改需要提交
          if git diff --cached --quiet; then
            echo "沒有更改需要提交"
          else
            # 生成提交訊息
            COMMIT_MSG="自動處理更新 [$(date +'%Y-%m-%d %H:%M:%S')]"
            
            if [ "${{ steps.process_word.outputs.html_changed }}" = "true" ]; then
              HTML_COUNT="${{ steps.process_word.outputs.html_count }}"
              COMMIT_MSG="${COMMIT_MSG} - 處理Word文檔($HTML_COUNT個)"
            fi
            
            if [ "${{ steps.update_json.outputs.blog_json_updated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新JSON數據"
            fi
            
            if [ "${{ steps.generate_sitemap.outputs.sitemap_generated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新網站地圖"
            fi
            
            if [ "${{ steps.move_processed.outputs.processed_moved }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 移動已處理文檔"
            fi
            
            # 提交更改
            git commit -m "$COMMIT_MSG"
            
            # 推送更改，加入重試機制
            MAX_RETRIES=3
            for i in $(seq 1 $MAX_RETRIES); do
              if git push origin ${{ github.ref_name }}; then
                echo "✓ 成功推送更改"
                break
              else
                echo "✗ 推送失敗，第 $i 次重試..."
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "推送失敗，已達最大重試次數"
                  exit 1
                fi
                sleep 5
                git pull --rebase origin ${{ github.ref_name }} || true
              fi
            done
          fi

      - name: 輸出執行結果
        if: always()
        run: |
          echo "=============================="
          echo "       執行結果摘要"
          echo "=============================="
          echo "執行時間: $(date)"
          echo "觸發方式: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手動觸發參數:"
            echo "  - 處理Word文檔: ${{ github.event.inputs.process_word }}"
            echo "  - 更新JSON文件: ${{ github.event.inputs.update_json }}"
            echo "  - 強制處理: ${{ github.event.inputs.force_process }}"
            echo "  - 調試模式: ${{ github.event.inputs.debug_mode }}"
          fi
          
          echo ""
          echo "處理結果:"
          echo "  - Word文檔檢查: ${{ steps.check_word_docs.outputs.has_word_docs == 'true' && '✓' || '✗' }} (發現 ${{ steps.check_word_docs.outputs.word_count || '0' }} 個文檔)"
          echo "  - Word文檔處理: ${{ steps.process_word.outputs.html_changed == 'true' && '✓' || '✗' }} (生成 ${{ steps.process_word.outputs.html_count || '0' }} 個HTML)"
          echo "  - 影片數據更新: ${{ steps.update_videos.outputs.videos_updated == 'true' && '✓' || '✗' }}"
          echo "  - JSON數據更新: ${{ steps.update_json.outputs.blog_json_updated == 'true' && '✓' || '✗' }}"
          echo "  - 網站地圖生成: ${{ steps.generate_sitemap.outputs.sitemap_generated == 'true' && '✓' || '✗' }}"
          echo "  - 文檔移動: ${{ steps.move_processed.outputs.processed_moved == 'true' && '✓' || '✗' }}"
          
          echo ""
          echo "文件統計:"
          echo "  - HTML文件數量: $(find blog -name "*.html" 2>/dev/null | wc -l)"
          echo "  - JSON文件數量: $(find assets/data -name "*.json" 2>/dev/null | wc -l)"
          echo "  - 待處理Word文檔: $(find word-docs -maxdepth 1 -name "*.docx" ! -name "~$*" 2>/dev/null | wc -l)"
          echo "  - 已處理Word文檔: $(find word-docs/processed -name "*.docx" 2>/dev/null | wc -l)"
          
          echo ""
          echo "=============================="

      - name: 清理臨時文件
        if: always()
        run: |
          echo "=== 清理臨時文件 ==="
          
          # 清理Python緩存
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          
          # 清理Word臨時文件
          find . -name "~$*.docx" -delete 2>/dev/null || true
          find . -name "~$*.doc" -delete 2>/dev/null || true
          
          # 清理日誌文件（保留最新的）
          if [ -d "logs" ]; then
            find logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
          fi
          
          echo "臨時文件清理完成"):
                          continue
                      
                      try:
                          # 解析文件名
                          filename = doc_file.stem
                          date_match = re.match(r'(\d{4}-\d{2}-\d{2})-(.+)', filename)
                          
                          if date_match:
                              date_str, title = date_match.groups()
                              
                              # 清理標題用於URL
                              clean_title = re.sub(r'[^\w\s-]', '', title.lower())
                              clean_title = re.sub(r'\s+', '-', clean_title.strip())
                              clean_title = re.sub(r'-+', '-', clean_title).strip('-')
                              
                              # 生成HTML文件名
                              html_filename = f'{date_str}-{clean_title}.html'
                              html_path = blog_dir / html_filename
                              
                              # 檢查HTML文件是否已存在
                              if html_path.exists():
                                  print(f'HTML文件已存在，跳過: {html_filename}')
                                  processed_files.append(str(doc_file))
                                  continue
                              
                              # 創建基本HTML內容
                              html_content = f'''<!DOCTYPE html>
          <html lang="zh-TW">
          <head>
          <meta charset="utf-8"/>
          <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
          <meta name="description" content="{title} - 霍爾果斯會計師事務所專業服務"/>
          <meta name="keywords" content="稅務, 會計, 保險, 霍爾果斯"/>
          <meta name="date" content="{date_str}"/>
          <meta name="main-category" content="稅務相關"/>
          <meta name="main-category-code" content="tax"/>
          <meta name="original-filename" content="{doc_file.name}"/>
          <title>{title} | 霍爾果斯會計師事務所</title>
          </head>
          <body>
          <article class="article-card">
          <div class="article-meta">
          <div class="article-date">{date_str}</div>
          <div class="article-category">稅務相關</div>
          </div>
          <h1 class="article-title">{title}</h1>
          <div class="article-body">
          <p>本文檔正在處理中，完整內容即將推出。</p>
          <p>如需立即諮詢相關服務，請聯繫霍爾果斯會計師事務所。</p>
          </div>
          <div class="article-footer">
          <div class="article-tags">
          <a class="article-tag" href="/blog.html?tag=tax">稅務</a>
          </div>
          </div>
          </article>
          </body>
          </html>'''
                              
                              # 寫入HTML文件
                              with open(html_path, 'w', encoding='utf-8') as f:
                                  f.write(html_content)
                              
                              print(f'已處理: {doc_file.name} -> {html_filename}')
                              processed_count += 1
                              processed_files.append(str(doc_file))
                          else:
                              print(f'無法解析文件名格式: {doc_file.name}')
                      except Exception as e:
                          print(f'處理文件 {doc_file.name} 時出錯: {e}')
              
              # 更新處理記錄
              processed_data = {'files': processed_files}
              processed_files_path = Path('assets/data/processed_files.json')
              
              # 讀取現有記錄
              if processed_files_path.exists():
                  try:
                      with open(processed_files_path, 'r', encoding='utf-8') as f:
                          existing_data = json.load(f)
                          if 'files' in existing_data:
                              # 合併現有記錄
                              all_files = list(set(existing_data['files'] + processed_files))
                              processed_data = {'files': all_files}
                  except Exception as e:
                      print(f'讀取現有處理記錄失敗: {e}')
              
              # 保存處理記錄
              with open(processed_files_path, 'w', encoding='utf-8') as f:
                  json.dump(processed_data, f, ensure_ascii=False, indent=2)
              
              print(f'備用方案處理完成，共處理 {processed_count} 個文檔')
              
          except Exception as e:
              print(f'備用處理方案執行失敗: {e}')
              import traceback
              traceback.print_exc()
          EOF
          fi
          
          # 檢查處理結果
          HTML_COUNT=$(find blog -name "*.html" 2>/dev/null | wc -l)
          
          if [ "$HTML_COUNT" -gt 0 ]; then
            echo "html_changed=true" >> $GITHUB_OUTPUT
            echo "html_count=$HTML_COUNT" >> $GITHUB_OUTPUT
            echo "處理成功，共有 $HTML_COUNT 個HTML文件"
          else
            echo "html_changed=false" >> $GITHUB_OUTPUT
            echo "html_count=0" >> $GITHUB_OUTPUT
            echo "警告：沒有生成HTML文件"
          fi

      - name: 更新影片數據
        id: update_videos
        run: |
          echo "=== 更新影片數據 ==="
          
          # 檢查影片更新腳本是否存在
          if [ -f "update_videos.py" ] || [ -f ".github/scripts/update_videos.py" ]; then
            echo "執行影片數據更新..."
            
            # 嘗試執行影片更新腳本
            if [ -f "update_videos.py" ]; then
              python update_videos.py || echo "影片更新腳本執行失敗"
            elif [ -f ".github/scripts/update_videos.py" ]; then
              python .github/scripts/update_videos.py || echo "影片更新腳本執行失敗"
            fi
          else
            echo "創建基本影片數據..."
            
            # 創建基本的影片數據
            cat > assets/data/videos.json << 'EOF'
          {
            "videos": [],
            "pagination": {
              "total": 0,
              "totalPages": 1,
              "itemsPerPage": 6
            }
          }
          EOF
          fi
          
          echo "videos_updated=true" >> $GITHUB_OUTPUT

      - name: 更新JSON數據文件
        id: update_json
        if: |
          steps.process_word.outputs.html_changed == 'true' || 
          github.event.inputs.update_json == 'true' || 
          github.event.inputs.update_json == '' ||
          github.event_name != 'workflow_dispatch'
        run: |
          echo "=== 更新JSON數據文件 ==="
          
          # 設置Python路徑
          export PYTHONPATH="$(pwd):$PYTHONPATH"
          
          # 嘗試使用JSON生成器
          if [ -f "json_generator.py" ] || [ -f ".github/scripts/update_blog_json.py" ]; then
            echo "使用專用JSON生成器..."
            
            if [ -f ".github/scripts/update_blog_json.py" ]; then
              python .github/scripts/update_blog_json.py
            elif [ -f "json_generator.py" ]; then
              python -c "
          from json_generator import JsonGenerator
          generator = JsonGenerator('assets/data')
          result = generator.generate_all_json()
          print('JSON生成完成')
          "
            fi
          else
            echo "使用內建JSON生成器..."
          fi
          
          # 生成基本的博客數據
          python3 -c "
          import os
          import json
          from datetime import datetime
          from pathlib import Path
          
          # 掃描HTML文件
          blog_dir = Path('blog')
          posts = []
          
          if blog_dir.exists():
              for html_file in sorted(blog_dir.glob('*.html'), reverse=True):
                  filename = html_file.stem
                  
                  # 解析文件名獲取基本信息
                  parts = filename.split('-')
                  if len(parts) >= 3:
                      try:
                          date_str = '-'.join(parts[:3])
                          datetime.strptime(date_str, '%Y-%m-%d')  # 驗證日期格式
                          title = ' '.join(parts[3:]).replace('-', ' ').title()
                      except ValueError:
                          date_str = datetime.now().strftime('%Y-%m-%d')
                          title = filename.replace('-', ' ').title()
                  else:
                      date_str = datetime.now().strftime('%Y-%m-%d')
                      title = filename.replace('-', ' ').title()
                  
                  post = {
                      'title': title,
                      'url': '/blog/' + filename,
                      'date': date_str,
                      'summary': f'{title} 的詳細說明...',
                      'category': 'tax',
                      'category_name': '稅務相關',
                      'tags': [{'name': '稅務', 'slug': 'tax'}],
                      'image': '/assets/images/blog/default.jpg',
                      'is_series': False
                  }
                  posts.append(post)
          
          # 生成博客索引
          blog_data = {
              'posts': posts,
              'pagination': {
                  'total_posts': len(posts),
                  'total_pages': max(1, (len(posts) + 9) // 10),
                  'items_per_page': 10
              },
              'categories': [
                  {'slug': 'tax', 'name': '稅務相關', 'count': len(posts)}
              ],
              'tags': [
                  {'slug': 'tax', 'name': '稅務', 'count': len(posts)}
              ],
              'series': {},
              'series_list': [],
              'generated_time': datetime.now().isoformat()
          }
          
          # 確保目錄存在
          Path('assets/data').mkdir(parents=True, exist_ok=True)
          
          # 保存各種JSON文件
          json_files = {
              'assets/data/blog_posts.json': {'posts': posts},
              'assets/data/blog-posts.json': {'posts': posts},
              'assets/data/blog-index.json': blog_data,
              'assets/data/latest-posts.json': posts[:3],
              'assets/data/series.json': {'series': {}, 'series_list': []},
              'assets/data/categories.json': {'categories': blog_data['categories']},
              'assets/data/tags.json': {'tags': blog_data['tags']}
          }
          
          for file_path, data in json_files.items():
              with open(file_path, 'w', encoding='utf-8') as f:
                  json.dump(data, f, ensure_ascii=False, indent=2)
          
          print(f'JSON數據更新完成，共處理 {len(posts)} 篇文章')
          "
          
          echo "blog_json_updated=true" >> $GITHUB_OUTPUT

      - name: 生成網站地圖
        id: generate_sitemap
        if: steps.update_json.outputs.blog_json_updated == 'true'
        run: |
          echo "=== 生成網站地圖 ==="
          
          # 檢查是否有專用的網站地圖生成器
          if [ -f "generate_sitemap.py" ] || [ -f ".github/scripts/generate_sitemap.py" ]; then
            echo "使用專用網站地圖生成器..."
            
            if [ -f "generate_sitemap.py" ]; then
              python generate_sitemap.py
            elif [ -f ".github/scripts/generate_sitemap.py" ]; then
              python .github/scripts/generate_sitemap.py
            fi
          else
            echo "生成基本網站地圖..."
            
            python3 -c "
          from datetime import datetime
          from pathlib import Path
          
          # 生成基本sitemap
          sitemap_content = '''<?xml version=\"1.0\" encoding=\"UTF-8\"?>
          <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">
            <url>
              <loc>https://www.horgoscpa.com/</loc>
              <lastmod>''' + datetime.now().strftime('%Y-%m-%d') + '''</lastmod>
              <changefreq>daily</changefreq>
              <priority>1.0</priority>
            </url>
            <url>
              <loc>https://www.horgoscpa.com/blog.html</loc>
              <lastmod>''' + datetime.now().strftime('%Y-%m-%d') + '''</lastmod>
              <changefreq>daily</changefreq>
              <priority>0.9</priority>
            </url>'''
          
          # 添加博客文章
          blog_dir = Path('blog')
          if blog_dir.exists():
              for html_file in blog_dir.glob('*.html'):
                  sitemap_content += f'''
            <url>
              <loc>https://www.horgoscpa.com/blog/{html_file.name}</loc>
              <lastmod>{datetime.now().strftime(\"%Y-%m-%d\")}</lastmod>
              <changefreq>weekly</changefreq>
              <priority>0.8</priority>
            </url>'''
          
          sitemap_content += '''
          </urlset>'''
          
          # 保存sitemap
          with open('sitemap.xml', 'w', encoding='utf-8') as f:
              f.write(sitemap_content)
          
          print('網站地圖生成完成')
          "
          fi
          
          echo "sitemap_generated=true" >> $GITHUB_OUTPUT

      - name: 移動已處理的Word文檔
        id: move_processed
        if: steps.process_word.outputs.html_changed == 'true'
        run: |
          echo "=== 移動已處理的Word文檔 ==="
          
          # 確保processed目錄存在
          mkdir -p word-docs/processed
          
          # 使用內建移動邏輯（不依賴外部腳本）
          python3 << 'EOF'
          import json
          import shutil
          from pathlib import Path
          
          try:
              # 載入已處理文件記錄
              processed_files_path = Path('assets/data/processed_files.json')
              processed_files = {'files': []}
              
              if processed_files_path.exists():
                  try:
                      with open(processed_files_path, 'r', encoding='utf-8') as f:
                          processed_files = json.load(f)
                  except Exception as e:
                      print(f'讀取已處理文件記錄失敗: {e}')
              
              # 移動已處理的Word文檔
              word_dir = Path('word-docs')
              processed_dir = Path('word-docs/processed')
              processed_dir.mkdir(exist_ok=True)
              
              moved_count = 0
              if word_dir.exists():
                  for doc_file in word_dir.glob('*.docx'):
                      if doc_file.name.startswith('~

      - name: 提交所有更改
        if: |
          steps.process_word.outputs.html_changed == 'true' || 
          steps.update_json.outputs.blog_json_updated == 'true' ||
          steps.generate_sitemap.outputs.sitemap_generated == 'true' ||
          steps.move_processed.outputs.processed_moved == 'true'
        run: |
          echo "=== 提交所有更改 ==="
          
          # 檢查Git狀態
          git status
          
          # 添加所有更改
          git add -A
          
          # 檢查是否有更改需要提交
          if git diff --cached --quiet; then
            echo "沒有更改需要提交"
          else
            # 生成提交訊息
            COMMIT_MSG="自動處理更新 [$(date +'%Y-%m-%d %H:%M:%S')]"
            
            if [ "${{ steps.process_word.outputs.html_changed }}" = "true" ]; then
              HTML_COUNT="${{ steps.process_word.outputs.html_count }}"
              COMMIT_MSG="${COMMIT_MSG} - 處理Word文檔($HTML_COUNT個)"
            fi
            
            if [ "${{ steps.update_json.outputs.blog_json_updated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新JSON數據"
            fi
            
            if [ "${{ steps.generate_sitemap.outputs.sitemap_generated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新網站地圖"
            fi
            
            if [ "${{ steps.move_processed.outputs.processed_moved }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 移動已處理文檔"
            fi
            
            # 提交更改
            git commit -m "$COMMIT_MSG"
            
            # 推送更改，加入重試機制
            MAX_RETRIES=3
            for i in $(seq 1 $MAX_RETRIES); do
              if git push origin ${{ github.ref_name }}; then
                echo "✓ 成功推送更改"
                break
              else
                echo "✗ 推送失敗，第 $i 次重試..."
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "推送失敗，已達最大重試次數"
                  exit 1
                fi
                sleep 5
                git pull --rebase origin ${{ github.ref_name }} || true
              fi
            done
          fi

      - name: 輸出執行結果
        if: always()
        run: |
          echo "=============================="
          echo "       執行結果摘要"
          echo "=============================="
          echo "執行時間: $(date)"
          echo "觸發方式: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手動觸發參數:"
            echo "  - 處理Word文檔: ${{ github.event.inputs.process_word }}"
            echo "  - 更新JSON文件: ${{ github.event.inputs.update_json }}"
            echo "  - 強制處理: ${{ github.event.inputs.force_process }}"
            echo "  - 調試模式: ${{ github.event.inputs.debug_mode }}"
          fi
          
          echo ""
          echo "處理結果:"
          echo "  - Word文檔檢查: ${{ steps.check_word_docs.outputs.has_word_docs == 'true' && '✓' || '✗' }} (發現 ${{ steps.check_word_docs.outputs.word_count || '0' }} 個文檔)"
          echo "  - Word文檔處理: ${{ steps.process_word.outputs.html_changed == 'true' && '✓' || '✗' }} (生成 ${{ steps.process_word.outputs.html_count || '0' }} 個HTML)"
          echo "  - 影片數據更新: ${{ steps.update_videos.outputs.videos_updated == 'true' && '✓' || '✗' }}"
          echo "  - JSON數據更新: ${{ steps.update_json.outputs.blog_json_updated == 'true' && '✓' || '✗' }}"
          echo "  - 網站地圖生成: ${{ steps.generate_sitemap.outputs.sitemap_generated == 'true' && '✓' || '✗' }}"
          echo "  - 文檔移動: ${{ steps.move_processed.outputs.processed_moved == 'true' && '✓' || '✗' }}"
          
          echo ""
          echo "文件統計:"
          echo "  - HTML文件數量: $(find blog -name "*.html" 2>/dev/null | wc -l)"
          echo "  - JSON文件數量: $(find assets/data -name "*.json" 2>/dev/null | wc -l)"
          echo "  - 待處理Word文檔: $(find word-docs -maxdepth 1 -name "*.docx" ! -name "~$*" 2>/dev/null | wc -l)"
          echo "  - 已處理Word文檔: $(find word-docs/processed -name "*.docx" 2>/dev/null | wc -l)"
          
          echo ""
          echo "=============================="

      - name: 清理臨時文件
        if: always()
        run: |
          echo "=== 清理臨時文件 ==="
          
          # 清理Python緩存
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          
          # 清理Word臨時文件
          find . -name "~$*.docx" -delete 2>/dev/null || true
          find . -name "~$*.doc" -delete 2>/dev/null || true
          
          # 清理日誌文件（保留最新的）
          if [ -d "logs" ]; then
            find logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
          fi
          
          echo "臨時文件清理完成"):
                          continue
                      
                      # 檢查文件是否在已處理列表中
                      file_path_str = str(doc_file)
                      if file_path_str in processed_files.get('files', []):
                          try:
                              # 移動到processed目錄
                              dest_path = processed_dir / doc_file.name
                              if not dest_path.exists():
                                  shutil.move(str(doc_file), str(dest_path))
                                  print(f'已移動: {doc_file.name} -> processed/{doc_file.name}')
                                  moved_count += 1
                              else:
                                  print(f'目標文件已存在，刪除源文件: {doc_file.name}')
                                  doc_file.unlink()
                                  moved_count += 1
                          except Exception as e:
                              print(f'移動文件失敗 {doc_file.name}: {e}')
              
              print(f'共處理 {moved_count} 個已處理的Word文檔')
              
          except Exception as e:
              print(f'移動處理過程出錯: {e}')
          EOF
          
          echo "processed_moved=true" >> $GITHUB_OUTPUT

      - name: 提交所有更改
        if: |
          steps.process_word.outputs.html_changed == 'true' || 
          steps.update_json.outputs.blog_json_updated == 'true' ||
          steps.generate_sitemap.outputs.sitemap_generated == 'true' ||
          steps.move_processed.outputs.processed_moved == 'true'
        run: |
          echo "=== 提交所有更改 ==="
          
          # 檢查Git狀態
          git status
          
          # 添加所有更改
          git add -A
          
          # 檢查是否有更改需要提交
          if git diff --cached --quiet; then
            echo "沒有更改需要提交"
          else
            # 生成提交訊息
            COMMIT_MSG="自動處理更新 [$(date +'%Y-%m-%d %H:%M:%S')]"
            
            if [ "${{ steps.process_word.outputs.html_changed }}" = "true" ]; then
              HTML_COUNT="${{ steps.process_word.outputs.html_count }}"
              COMMIT_MSG="${COMMIT_MSG} - 處理Word文檔($HTML_COUNT個)"
            fi
            
            if [ "${{ steps.update_json.outputs.blog_json_updated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新JSON數據"
            fi
            
            if [ "${{ steps.generate_sitemap.outputs.sitemap_generated }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 更新網站地圖"
            fi
            
            if [ "${{ steps.move_processed.outputs.processed_moved }}" = "true" ]; then
              COMMIT_MSG="${COMMIT_MSG} - 移動已處理文檔"
            fi
            
            # 提交更改
            git commit -m "$COMMIT_MSG"
            
            # 推送更改，加入重試機制
            MAX_RETRIES=3
            for i in $(seq 1 $MAX_RETRIES); do
              if git push origin ${{ github.ref_name }}; then
                echo "✓ 成功推送更改"
                break
              else
                echo "✗ 推送失敗，第 $i 次重試..."
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "推送失敗，已達最大重試次數"
                  exit 1
                fi
                sleep 5
                git pull --rebase origin ${{ github.ref_name }} || true
              fi
            done
          fi

      - name: 輸出執行結果
        if: always()
        run: |
          echo "=============================="
          echo "       執行結果摘要"
          echo "=============================="
          echo "執行時間: $(date)"
          echo "觸發方式: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手動觸發參數:"
            echo "  - 處理Word文檔: ${{ github.event.inputs.process_word }}"
            echo "  - 更新JSON文件: ${{ github.event.inputs.update_json }}"
            echo "  - 強制處理: ${{ github.event.inputs.force_process }}"
            echo "  - 調試模式: ${{ github.event.inputs.debug_mode }}"
          fi
          
          echo ""
          echo "處理結果:"
          echo "  - Word文檔檢查: ${{ steps.check_word_docs.outputs.has_word_docs == 'true' && '✓' || '✗' }} (發現 ${{ steps.check_word_docs.outputs.word_count || '0' }} 個文檔)"
          echo "  - Word文檔處理: ${{ steps.process_word.outputs.html_changed == 'true' && '✓' || '✗' }} (生成 ${{ steps.process_word.outputs.html_count || '0' }} 個HTML)"
          echo "  - 影片數據更新: ${{ steps.update_videos.outputs.videos_updated == 'true' && '✓' || '✗' }}"
          echo "  - JSON數據更新: ${{ steps.update_json.outputs.blog_json_updated == 'true' && '✓' || '✗' }}"
          echo "  - 網站地圖生成: ${{ steps.generate_sitemap.outputs.sitemap_generated == 'true' && '✓' || '✗' }}"
          echo "  - 文檔移動: ${{ steps.move_processed.outputs.processed_moved == 'true' && '✓' || '✗' }}"
          
          echo ""
          echo "文件統計:"
          echo "  - HTML文件數量: $(find blog -name "*.html" 2>/dev/null | wc -l)"
          echo "  - JSON文件數量: $(find assets/data -name "*.json" 2>/dev/null | wc -l)"
          echo "  - 待處理Word文檔: $(find word-docs -maxdepth 1 -name "*.docx" ! -name "~$*" 2>/dev/null | wc -l)"
          echo "  - 已處理Word文檔: $(find word-docs/processed -name "*.docx" 2>/dev/null | wc -l)"
          
          echo ""
          echo "=============================="

      - name: 清理臨時文件
        if: always()
        run: |
          echo "=== 清理臨時文件 ==="
          
          # 清理Python緩存
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          
          # 清理Word臨時文件
          find . -name "~$*.docx" -delete 2>/dev/null || true
          find . -name "~$*.doc" -delete 2>/dev/null || true
          
          # 清理日誌文件（保留最新的）
          if [ -d "logs" ]; then
            find logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
          fi
          
          echo "臨時文件清理完成"