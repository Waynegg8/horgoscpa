name: 部落格與影片自動化處理

on:
  # 手動觸發
  workflow_dispatch:
    inputs:
      process_word:
        description: '處理Word文檔'
        required: true
        default: 'true'
        type: boolean
      update_json:
        description: '更新JSON文件'
        required: true
        default: 'true'
        type: boolean
      handle_deletion:
        description: '處理文章刪除'
        required: true
        default: 'true'
        type: boolean
      update_videos:
        description: '更新影片數據'
        required: true
        default: 'true'
        type: boolean
      force_scan:
        description: '強制掃描所有HTML文章'
        required: true
        default: 'false'
        type: boolean
      update_sitemap:
        description: '更新網站Sitemap'
        required: true
        default: 'true'
        type: boolean
  
  # 當有任何文件變更時觸發
  push:
    paths:
      - '**/*'  # 任何文件變更都會觸發工作流
  
  # 當文章被刪除時觸發
  delete:
    paths:
      - 'blog/**/*.html'
      - 'services/**/*.html'
      - '*.html'
  
  # 每天定時執行
  schedule:
    - cron: '0 1 * * *'  # UTC 時間每天1點 (台灣時間9點)
    
  # 接收從網頁界面觸發的事件
  repository_dispatch:
    types: [delete-article, upload-article, scan-articles, update-video, update-sitemap]

jobs:
  content-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
      # 1. 檢出代碼
      - name: 檢出代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 包含完整歷史記錄用於檢測刪除
          
      # 2. 設置 Git 配置
      - name: 設置 Git 配置
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      # 3. 設置 Python 環境
      - name: 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      
      # 4. 安裝依賴
      - name: 安裝依賴套件
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 5. 創建必要的目錄
      - name: 創建必要的目錄
        run: |
          mkdir -p blog
          mkdir -p assets/data
          mkdir -p word-docs
          mkdir -p video

      # 6. 處理API觸發的文章刪除
      - name: 處理API觸發的文章刪除
        if: github.event_name == 'repository_dispatch' && github.event.action == 'delete-article'
        run: |
          echo "收到API觸發的文章刪除請求"
          echo "文件路徑: ${{ github.event.client_payload.file_path }}"
          echo "文章標題: ${{ github.event.client_payload.article_title }}"
          
          # 確保工作區乾淨
          git stash -u || true
          
          # 先拉取最新變更以避免衝突
          git pull origin ${GITHUB_REF##*/} || true
          
          # 應用stash (如果需要)
          git stash pop || true
          
          # 檢查文件是否存在
          if [ -f "${{ github.event.client_payload.file_path }}" ]; then
            # 刪除文件
            rm "${{ github.event.client_payload.file_path }}"
            echo "文件已刪除"
            
            # 提交變更
            git add -A
            git commit -m "透過API刪除文章: ${{ github.event.client_payload.article_title }}"
            git push
            echo "已提交刪除操作"
          else
            echo "警告: 找不到要刪除的文件 ${{ github.event.client_payload.file_path }}"
          fi

      # 7. 處理掃描請求
      - name: 處理API觸發的掃描請求
        if: github.event_name == 'repository_dispatch' && github.event.action == 'scan-articles'
        run: |
          echo "收到API觸發的文章掃描請求"
          echo "將進行強制掃描"
          python .github/scripts/scan_html_files.py
          
          # 確保工作區乾淨
          git stash -u || true
          
          # 先拉取最新變更以避免衝突
          git pull origin ${GITHUB_REF##*/} || true
          
          # 應用stash (如果需要)
          git stash pop || true
          
          git add assets/data/blog-posts.json assets/data/latest-posts.json
          git commit -m "透過API執行強制掃描並更新JSON" || echo "無需提交"
          git push || echo "無需推送"

      # 8. 處理Word文檔
      - name: 處理Word文檔
        if: github.event_name == 'push' || github.event.inputs.process_word == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'upload-article')
        run: |
          if [ -d "word-docs" ] && [ "$(ls -A word-docs)" ]; then
            echo "開始處理word-docs目錄中的Word文檔..."
            
            # 使用 .github/scripts 目錄下的腳本
            if [ -f ".github/scripts/word_to_html.py" ]; then
              python .github/scripts/word_to_html.py word-docs blog
              echo "使用 .github/scripts/word_to_html.py 處理完成"
            else
              echo "警告: 找不到 .github/scripts/word_to_html.py 腳本"
              echo "嘗試查找腳本位置:"
              find . -name "word_to_html.py" -type f
              
              # 如果能找到腳本，使用第一個找到的
              SCRIPT_PATH=$(find . -name "word_to_html.py" -type f | head -n 1)
              if [ -n "$SCRIPT_PATH" ]; then
                echo "找到腳本: $SCRIPT_PATH"
                python "$SCRIPT_PATH" word-docs blog
                echo "使用 $SCRIPT_PATH 處理完成"
              else
                echo "錯誤: 無法找到任何 word_to_html.py 腳本"
                exit 1
              fi
            fi
          else
            echo "word-docs 目錄為空或不存在，跳過處理"
          fi

      # 9. 上傳並提交轉換後的 HTML - 修復此步驟以處理無文件情況
      - name: 上傳並提交轉換後的 HTML
        run: |
          echo "檢查是否有新的 HTML 文件"
          git add blog/*.html || echo "沒有找到HTML文件或添加失敗"
          git commit -m "提交轉換後的 HTML 文件" || echo "沒有新的 HTML 文件需要提交"
          git push || echo "沒有變更需要推送"
          
      # 10. 更新博客JSON文件
      - name: 更新博客JSON文件
        id: update_blog_json
        if: steps.commit-html.outputs.html_changed == 'true' || github.event.inputs.update_json == 'true' || github.event_name == 'schedule' || steps.check_deleted.outputs.html_deleted == 'true' || (github.event_name == 'repository_dispatch' && (github.event.action == 'delete-article' || github.event.action == 'upload-article' || github.event.action == 'scan-articles'))
        run: |
          echo "開始更新博客JSON文件..."
          
          # 使用 .github/scripts 目錄下的腳本
          if [ -f ".github/scripts/update_blog_posts.py" ]; then
            python .github/scripts/update_blog_posts.py
            echo "使用 .github/scripts/update_blog_posts.py 更新完成"
            echo "blog_json_updated=true" >> $GITHUB_OUTPUT
          else
            echo "警告: 找不到 .github/scripts/update_blog_posts.py 腳本"
            echo "嘗試查找腳本位置:"
            find . -name "update_blog_posts.py" -type f
            
            # 如果能找到腳本，使用第一個找到的
            SCRIPT_PATH=$(find . -name "update_blog_posts.py" -type f | head -n 1)
            if [ -n "$SCRIPT_PATH" ]; then
              echo "找到腳本: $SCRIPT_PATH"
              python "$SCRIPT_PATH"
              echo "使用 $SCRIPT_PATH 更新完成"
              echo "blog_json_updated=true" >> $GITHUB_OUTPUT
            else
              echo "錯誤: 無法找到任何 update_blog_posts.py 腳本"
              echo "blog_json_updated=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      # 11. 更新影片數據
      - name: 更新影片數據
        id: update_videos
        if: github.event.inputs.update_videos == 'true' || steps.check_video_changes.outputs.videos_txt_changed == 'true' || (github.event_name == 'push' && contains(github.event.head_commit.modified, 'video/videos.txt')) || (github.event_name == 'push' && contains(github.event.head_commit.added, 'video/videos.txt')) || (github.event_name == 'repository_dispatch' && github.event.action == 'update-video')
        run: |
          echo "檢測到需要更新影片數據"
          
          # 檢查video資料夾是否存在videos.txt
          if [ -f "video/videos.txt" ]; then
            echo "找到 video/videos.txt，準備更新影片數據"
            
            # 查找並執行update_videos.py腳本
            if [ -f ".github/scripts/update_videos.py" ]; then
              echo "使用 .github/scripts/update_videos.py 更新影片數據"
              python .github/scripts/update_videos.py
              echo "videos_updated=true" >> $GITHUB_OUTPUT
            else
              echo "警告: 找不到 .github/scripts/update_videos.py 腳本"
              echo "嘗試查找腳本位置:"
              find . -name "update_videos.py" -type f
              
              # 如果能找到腳本，使用第一個找到的
              SCRIPT_PATH=$(find . -name "update_videos.py" -type f | head -n 1)
              if [ -n "$SCRIPT_PATH" ]; then
                echo "找到腳本: $SCRIPT_PATH"
                python "$SCRIPT_PATH"
                echo "使用 $SCRIPT_PATH 更新影片數據"
                echo "videos_updated=true" >> $GITHUB_OUTPUT
              else
                echo "錯誤: 無法找到任何 update_videos.py 腳本"
                echo "videos_updated=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "警告: 找不到 video/videos.txt 文件"
            echo "videos_updated=false" >> $GITHUB_OUTPUT
          fi

      # 12. 清理已處理的Word文檔 - 修復以處理無變更情況
      - name: 清理已處理的Word文檔
        if: github.event_name == 'push' && steps.commit-html.outputs.html_changed == 'true'
        run: |
          # 確保工作區乾淨
          git stash -u || true
          
          # 先拉取最新變更以避免衝突
          git pull origin ${GITHUB_REF##*/} || true
          
          # 應用stash (如果需要)
          git stash pop || true
          
          # 檢查是否有文件需要移動
          if [ -d "word-docs" ] && [ "$(find word-docs -maxdepth 1 -type f -name "*.docx" | wc -l)" -gt 0 ]; then
            # 移動已處理的文件到processed目錄
            mkdir -p word-docs/processed
            find word-docs -maxdepth 1 -type f -name "*.docx" -exec mv {} word-docs/processed/ \;
            
            # 提交更改
            git add word-docs/
            git commit -m "移動已處理的Word文檔" || echo "無需提交"
            git push || echo "無需推送"
          else
            echo "沒有需要處理的 Word 文檔"
          fi
      
      # 13. 更新網站 Sitemap（最後步驟） - 修復以處理錯誤
      - name: 更新網站 Sitemap
        id: update_sitemap
        run: |
          echo "開始更新網站 Sitemap..."
          
          # 生成並提交新的 sitemap.xml 文件
          python .github/scripts/generate_sitemap.py || echo "生成 Sitemap 時出錯"
          
          # 檢查文件是否存在並提交
          if [ -f "sitemap.xml" ]; then
            git add sitemap.xml
            git commit -m "更新網站Sitemap" || echo "無需提交 Sitemap"
            git push || echo "無需推送 Sitemap"
          else
            echo "警告: sitemap.xml 文件不存在或生成失敗"
          fi