name: 部落格與影片自動化處理

on:
  # 手動觸發
  workflow_dispatch:
    inputs:
      process_word:
        description: '處理Word文檔'
        required: true
        default: 'true'
        type: boolean
      update_json:
        description: '更新JSON文件'
        required: true
        default: 'true'
        type: boolean
      handle_deletion:
        description: '處理文章刪除'
        required: true
        default: 'true'
        type: boolean
      update_videos:
        description: '更新影片數據'
        required: true
        default: 'false'
        type: boolean
      force_scan:
        description: '強制掃描所有HTML文章'
        required: true
        default: 'false'
        type: boolean
  
  # 當Word文檔上傳到指定目錄時觸發
  push:
    paths:
      - 'word-docs/**/*.docx'
      - 'blog/**/*.html'
      - 'assets/data/videos.json'
  
  # 當文章被刪除時觸發
  delete:
    paths:
      - 'blog/**/*.html'
  
  # 每天定時執行
  schedule:
    - cron: '0 1 * * *'  # UTC 時間每天1點 (台灣時間9點)
    
  # 接收從網頁界面觸發的事件
  repository_dispatch:
    types: [delete-article, upload-article, scan-articles, update-video]

jobs:
  content-automation:
    runs-on: ubuntu-latest
    # 增加權限設置，確保可以被API觸發並運行
    permissions:
      contents: write
      actions: write
    
    steps:
      # 檢出代碼
      - name: 檢出代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 包含完整歷史記錄用於檢測刪除
      
      # 設置 Python 環境
      - name: 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      
      # 安裝依賴
      - name: 安裝依賴套件
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 創建必要的目錄
      - name: 創建必要的目錄
        run: |
          mkdir -p blog
          mkdir -p assets/data
          mkdir -p word-docs
      
      # 處理從repository_dispatch接收的文章刪除請求
      - name: 處理API觸發的文章刪除
        if: github.event_name == 'repository_dispatch' && github.event.action == 'delete-article'
        run: |
          echo "收到API觸發的文章刪除請求"
          echo "文件路徑: ${{ github.event.client_payload.file_path }}"
          echo "文章標題: ${{ github.event.client_payload.article_title }}"
          
          # 檢查文件是否存在
          if [ -f "${{ github.event.client_payload.file_path }}" ]; then
            # 刪除文件
            rm "${{ github.event.client_payload.file_path }}"
            echo "文件已刪除"
            
            # 提交變更
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add -A
            git commit -m "透過API刪除文章: ${{ github.event.client_payload.article_title }}"
            git push
            echo "已提交刪除操作"
          else
            echo "警告: 找不到要刪除的文件 ${{ github.event.client_payload.file_path }}"
          fi
      
      # 處理從repository_dispatch接收的文章上傳請求
      - name: 處理API觸發的文章上傳
        if: github.event_name == 'repository_dispatch' && github.event.action == 'upload-article'
        run: |
          echo "收到API觸發的文章上傳請求"
          echo "文件已經由API上傳至指定位置，接下來進行處理"
      
      # 處理從repository_dispatch接收的掃描請求
      - name: 處理API觸發的掃描請求
        if: github.event_name == 'repository_dispatch' && github.event.action == 'scan-articles'
        run: |
          echo "收到API觸發的文章掃描請求"
          echo "將進行強制掃描"
          python scan_html_files.py
          
          # 提交變更
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/data/blog-posts.json assets/data/latest-posts.json
          git commit -m "透過API執行強制掃描並更新JSON" || echo "無需提交"
          git push || echo "無需推送"
      
      # 處理從repository_dispatch接收的影片更新請求
      - name: 處理API觸發的影片更新
        if: github.event_name == 'repository_dispatch' && github.event.action == 'update-video'
        run: |
          echo "收到API觸發的影片更新請求"
          echo "影片JSON文件已由API更新，無需額外操作"
      
      # 初始化或檢查JSON文件
      - name: 初始化JSON文件
        id: init_json
        run: |
          # 檢查blog-posts.json是否存在
          if [ ! -f "assets/data/blog-posts.json" ] || [ "${{ github.event.inputs.force_scan }}" == "true" ] || [ "${{ github.event_name == 'repository_dispatch' && github.event.action == 'scan-articles' }}" == "true" ]; then
            # 不存在或強制掃描，創建初始結構
            echo "建立或更新blog-posts.json"
            mkdir -p assets/data
            echo '{
              "posts": [],
              "pagination": {
                "total_posts": 0,
                "total_pages": 1,
                "items_per_page": 6
              },
              "categories": ["tax", "accounting", "business"],
              "tags": []
            }' > assets/data/blog-posts.json
            
            # 創建初始的latest-posts.json
            echo '[]' > assets/data/latest-posts.json
            
            # 標記需要掃描HTML文件
            echo "scan_html=true" >> $GITHUB_OUTPUT
          else
            # 檢查posts是否為空 - 使用 grep || true 避免 grep 找不到匹配項目時的退出代碼 1
            if grep -q '"posts": \[\]' assets/data/blog-posts.json; then
              echo "blog-posts.json的posts為空，需要掃描HTML文件"
              echo "scan_html=true" >> $GITHUB_OUTPUT
            else
              # 使用 wc -l 計算包含 "posts" 的行數，如果至少有一行，則可能有文章
              POSTS_LINE_COUNT=$(grep -c "posts" assets/data/blog-posts.json || true)
              if [ "$POSTS_LINE_COUNT" -gt 0 ]; then
                echo "blog-posts.json已存在且包含文章數據"
                echo "scan_html=false" >> $GITHUB_OUTPUT
              else
                echo "無法確定blog-posts.json的內容，預設進行掃描"
                echo "scan_html=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi
          
          # 檢查videos.json是否存在
          if [ ! -f "assets/data/videos.json" ]; then
            echo "建立初始videos.json檔案"
            echo '{
              "videos": [],
              "pagination": {
                "total": 0,
                "totalPages": 1,
                "itemsPerPage": 6
              }
            }' > assets/data/videos.json
          fi
          
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/data/*.json
          git commit -m "初始化或更新JSON檔案" || echo "無需提交"
          git push || echo "無需推送"
      
      # 掃描HTML文件生成JSON (如果需要)
      - name: 掃描現有HTML文件
        if: ${{ steps.init_json.outputs.scan_html == 'true' || github.event.inputs.force_scan == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'scan-articles') }}
        run: |
          python scan_html_files.py
          
          # 提交更改
          git add assets/data/blog-posts.json assets/data/latest-posts.json
          git commit -m "掃描現有HTML文件並更新JSON" || echo "無需提交"
          git push || echo "無需推送"
      
      # 處理Word文檔 (如果啟用)
      - name: 處理Word文檔
        if: ${{ github.event_name == 'push' || github.event.inputs.process_word == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'upload-article') }}
        run: |
          if [ -d "word-docs" ] && [ "$(ls -A word-docs)" ]; then
            # 複製word_to_html.py腳本到當前目錄
            if [ -f ".github/scripts/word_to_html.py" ]; then
              cp .github/scripts/word_to_html.py ./
            elif [ -f ".github/workflows/word_to_html.py" ]; then
              cp .github/workflows/word_to_html.py ./
            fi
            
            # 運行Python腳本處理Word文檔
            if [ -f "word_to_html.py" ]; then
              python word_to_html.py word-docs blog
            else
              echo "找不到word_to_html.py腳本"
              exit 1
            fi
          else
            echo "word-docs 目錄為空或不存在，跳過處理"
          fi
      
      # 檢測已刪除的HTML文件
      - name: 檢測已刪除的HTML文件
        id: check_deleted
        if: ${{ github.event_name == 'delete' || github.event.inputs.handle_deletion == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'delete-article') }}
        run: |
          # 獲取已刪除的HTML文件列表
          if [ "${{ github.event_name }}" == "repository_dispatch" ] && [ "${{ github.event.action }}" == "delete-article" ]; then
            echo "${{ github.event.client_payload.file_path }}" > deleted_files.txt
          else
            git diff --name-only --diff-filter=D HEAD~1 HEAD | grep -E '^blog/.*\.html$' > deleted_files.txt || true
          fi
          
          # 檢查是否有文件被刪除
          if [ -s deleted_files.txt ]; then
            echo "檢測到以下HTML文件已被刪除:"
            cat deleted_files.txt
            echo "html_deleted=true" >> $GITHUB_OUTPUT
          else
            echo "沒有HTML文件被刪除"
            echo "html_deleted=false" >> $GITHUB_OUTPUT
          fi
      
      # 提交生成的HTML文件
      - name: 提交生成的HTML文件
        id: commit-html
        if: ${{ github.event_name == 'push' || github.event.inputs.process_word == 'true' || (github.event_name == 'repository_dispatch' && github.event.action == 'upload-article') }}
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add blog/
          
          if git diff --staged --quiet; then
            echo "沒有新的HTML文件需要提交"
            echo "html_changed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "自動將Word文檔轉換為HTML"
            git push
            echo "html_changed=true" >> $GITHUB_OUTPUT
          fi
      
      # 更新博客JSON文件
      - name: 更新博客JSON文件
        id: update_blog_json
        if: ${{ steps.commit-html.outputs.html_changed == 'true' || github.event.inputs.update_json == 'true' || github.event_name == 'schedule' || steps.check_deleted.outputs.html_deleted == 'true' || (github.event_name == 'repository_dispatch' && (github.event.action == 'delete-article' || github.event.action == 'upload-article' || github.event.action == 'scan-articles')) }}
        run: |
          python update_blog_posts.py
          echo "blog_json_updated=true" >> $GITHUB_OUTPUT
        env:
          GH_PAT: ${{ secrets.GITHUB_TOKEN }}
      
      # 處理影片JSON更新
      - name: 檢查影片JSON更新
        id: check_videos
        run: |
          if [ "${{ github.event.inputs.update_videos }}" == "true" ] || git diff --name-only HEAD~1 HEAD | grep -q "assets/data/videos.json" || [ "${{ github.event_name == 'repository_dispatch' && github.event.action == 'update-video' }}" == "true" ]; then
            echo "videos_changed=true" >> $GITHUB_OUTPUT
          else
            echo "videos_changed=false" >> $GITHUB_OUTPUT
          fi
      
      # 提交更新的JSON文件
      - name: 提交更新的JSON文件
        if: ${{ steps.update_blog_json.outputs.blog_json_updated == 'true' || steps.check_videos.outputs.videos_changed == 'true' || steps.init_json.outputs.scan_html == 'true' }}
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add assets/data/blog-posts.json
          git add assets/data/videos.json
          git add assets/data/latest-posts.json
          
          if git diff --staged --quiet; then
            echo "沒有JSON文件變更需要提交"
          else
            git commit -m "更新博客與影片JSON數據"
            git push
          fi
      
      # 清理Word文檔（可選，將處理過的Word文檔移動到processed目錄）
      - name: 清理已處理的Word文檔
        if: ${{ github.event_name == 'push' && steps.commit-html.outputs.html_changed == 'true' }}
        run: |
          # 移動已處理的文件到processed目錄
          mkdir -p word-docs/processed
          find word-docs -maxdepth 1 -type f -name "*.docx" -exec mv {} word-docs/processed/ \;
          
          # 提交更改
          git add word-docs/
          git commit -m "移動已處理的Word文檔" || echo "無需提交"
          git push || echo "無需推送"