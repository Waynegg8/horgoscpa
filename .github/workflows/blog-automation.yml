name: 部落格與影片自動化處理

on:
  # 手動觸發
  workflow_dispatch:
    inputs:
      process_word:
        description: '處理Word文檔'
        required: true
        default: 'true'
        type: boolean
      update_json:
        description: '更新JSON文件'
        required: true
        default: 'true'
        type: boolean
      handle_deletion:
        description: '處理文章刪除'
        required: true
        default: 'true'
        type: boolean
      update_videos:
        description: '更新影片數據'
        required: true
        default: 'false'
        type: boolean
      force_scan:
        description: '強制掃描所有HTML文章'
        required: true
        default: 'false'
        type: boolean
  
  # 當Word文檔上傳到指定目錄時觸發
  push:
    paths:
      - 'word-docs/**/*.docx'
      - 'blog/**/*.html'
      - 'assets/data/videos.json'
  
  # 當文章被刪除時觸發
  delete:
    paths:
      - 'blog/**/*.html'
  
  # 每天定時執行
  schedule:
    - cron: '0 1 * * *'  # UTC 時間每天1點 (台灣時間9點)

jobs:
  content-automation:
    runs-on: ubuntu-latest
    # 增加權限設置，確保可以被API觸發並運行
    permissions:
      contents: write
      actions: write
    
    steps:
      # 檢出代碼
      - name: 檢出代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 包含完整歷史記錄用於檢測刪除
      
      # 設置 Python 環境
      - name: 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      
      # 安裝依賴
      - name: 安裝依賴套件
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 創建必要的目錄
      - name: 創建必要的目錄
        run: |
          mkdir -p blog
          mkdir -p assets/data
          mkdir -p word-docs
      
      # 初始化或檢查JSON文件
      - name: 初始化JSON文件
        id: init_json
        run: |
          # 檢查blog-posts.json是否存在
          if [ ! -f "assets/data/blog-posts.json" ] || [ "${{ github.event.inputs.force_scan }}" == "true" ]; then
            # 不存在或強制掃描，創建初始結構
            echo "建立或更新blog-posts.json"
            mkdir -p assets/data
            echo '{
              "posts": [],
              "pagination": {
                "total_posts": 0,
                "total_pages": 1,
                "items_per_page": 6
              },
              "categories": ["tax", "accounting", "business"],
              "tags": []
            }' > assets/data/blog-posts.json
            
            # 創建初始的latest-posts.json
            echo '[]' > assets/data/latest-posts.json
            
            # 標記需要掃描HTML文件
            echo "scan_html=true" >> $GITHUB_OUTPUT
          else
            # 檢查posts是否為空 - 使用 grep || true 避免 grep 找不到匹配項目時的退出代碼 1
            if grep -q '"posts": \[\]' assets/data/blog-posts.json; then
              echo "blog-posts.json的posts為空，需要掃描HTML文件"
              echo "scan_html=true" >> $GITHUB_OUTPUT
            else
              # 使用 wc -l 計算包含 "posts" 的行數，如果至少有一行，則可能有文章
              POSTS_LINE_COUNT=$(grep -c "posts" assets/data/blog-posts.json || true)
              if [ "$POSTS_LINE_COUNT" -gt 0 ]; then
                echo "blog-posts.json已存在且包含文章數據"
                echo "scan_html=false" >> $GITHUB_OUTPUT
              else
                echo "無法確定blog-posts.json的內容，預設進行掃描"
                echo "scan_html=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi
          
          # 檢查videos.json是否存在
          if [ ! -f "assets/data/videos.json" ]; then
            echo "建立初始videos.json檔案"
            echo '{
              "videos": [],
              "pagination": {
                "total": 0,
                "totalPages": 1,
                "itemsPerPage": 6
              }
            }' > assets/data/videos.json
          fi
          
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/data/*.json
          git commit -m "初始化或更新JSON檔案" || echo "無需提交"
          git push || echo "無需推送"
      
      # 掃描HTML文件生成JSON (如果需要)
      - name: 掃描現有HTML文件
        if: ${{ steps.init_json.outputs.scan_html == 'true' || github.event.inputs.force_scan == 'true' }}
        run: |
          # 創建一個Python腳本來掃描HTML文件
          cat > scan_html_files.py << 'EOF'
          #!/usr/bin/env python3
          # -*- coding: utf-8 -*-
          
          """
          掃描現有HTML文件生成blog-posts.json
          """
          
          import os
          import re
          import json
          import datetime
          from pathlib import Path
          from bs4 import BeautifulSoup
          
          # 部落格文章路徑設定
          BLOG_DIR = "blog"  # 博客文章目錄
          JSON_PATH = "assets/data/blog-posts.json"  # 完整文章JSON文件路徑
          LATEST_POSTS_PATH = "assets/data/latest-posts.json"  # 最新文章JSON文件路徑
          ITEMS_PER_PAGE = 6  # 每頁顯示的文章數量
          
          # 分類映射
          CATEGORY_MAPPING = {
              "稅務相關": "tax",
              "會計記帳": "accounting",
              "企業經營": "business",
              "企業登記": "business",
              "創業資訊": "startup",
              "財務規劃": "financial",
              "法律知識": "legal"
          }
          
          def extract_info_from_html(file_path):
              """從HTML文件中提取文章資訊"""
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # 使用BeautifulSoup解析HTML
                  soup = BeautifulSoup(content, 'lxml')
                  
                  # 提取標題
                  title_tag = soup.find('title')
                  title = title_tag.text.split(' | ')[0] if title_tag else os.path.basename(file_path)
                  
                  # 提取日期
                  date_span = soup.select_one('span.date')
                  date = date_span.text if date_span else os.path.basename(file_path).split('-')[0:3]
                  if isinstance(date, list):
                      date = '-'.join(date)
                  
                  # 提取摘要
                  meta_desc = soup.find('meta', attrs={'name': 'description'})
                  summary = meta_desc['content'] if meta_desc else ""
                  
                  # 提取圖片
                  meta_image = soup.find('meta', property='og:image')
                  image = meta_image['content'] if meta_image else "/assets/images/blog/default.jpg"
                  
                  # 提取分類
                  category_span = soup.select_one('span.category')
                  category_text = ""
                  if category_span:
                      category_link = category_span.find('a')
                      if category_link:
                          category_text = category_link.text
                  
                  category_code = CATEGORY_MAPPING.get(category_text, "tax")
                  
                  # 提取標籤
                  tags = []
                  tag_links = soup.select('.post-tags .tag')
                  for tag_link in tag_links:
                      tags.append(tag_link.text)
                  
                  # 獲取URL
                  relative_path = os.path.relpath(file_path)
                  url = f"/{relative_path}"
                  
                  return {
                      "title": title,
                      "date": date,
                      "summary": summary,
                      "url": url,
                      "image": image,
                      "category": category_code,
                      "tags": tags
                  }
              except Exception as e:
                  print(f"處理文件 {file_path} 時出錯: {str(e)}")
                  return None
          
          def scan_blog_directory():
              """掃描部落格目錄獲取所有HTML文件信息"""
              posts = []
              
              # 檢查目錄是否存在
              if not os.path.exists(BLOG_DIR):
                  print(f"目錄 {BLOG_DIR} 不存在")
                  return posts
              
              # 掃描目錄下所有HTML文件
              for file_name in os.listdir(BLOG_DIR):
                  if file_name.endswith('.html'):
                      file_path = os.path.join(BLOG_DIR, file_name)
                      post_info = extract_info_from_html(file_path)
                      if post_info:
                          posts.append(post_info)
                      else:
                          print(f"無法提取 {file_path} 的信息")
              
              # 按日期排序
              posts.sort(key=lambda x: x["date"], reverse=True)
              
              return posts
          
          def update_json_files(posts):
              """更新JSON文件"""
              # 確保目錄存在
              os.makedirs(os.path.dirname(JSON_PATH), exist_ok=True)
              
              # 獲取所有標籤和分類
              all_tags = set()
              all_categories = set()
              
              for post in posts:
                  if 'tags' in post and post['tags']:
                      all_tags.update(post['tags'])
                  if 'category' in post:
                      all_categories.add(post['category'])
              
              # 建立完整數據結構
              full_data = {
                  "posts": posts,
                  "pagination": {
                      "total_posts": len(posts),
                      "total_pages": max(1, (len(posts) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE),
                      "items_per_page": ITEMS_PER_PAGE
                  },
                  "categories": list(all_categories),
                  "tags": list(all_tags)
              }
              
              # 寫入完整JSON文件
              with open(JSON_PATH, 'w', encoding='utf-8') as f:
                  json.dump(full_data, f, ensure_ascii=False, indent=2)
              
              print(f"成功更新 {JSON_PATH}")
              print(f"共 {len(posts)} 篇文章，{len(all_categories)} 個分類，{len(all_tags)} 個標籤")
              
              # 更新最新文章JSON
              latest_posts = posts[:3] if len(posts) >= 3 else posts
              with open(LATEST_POSTS_PATH, 'w', encoding='utf-8') as f:
                  json.dump(latest_posts, f, ensure_ascii=False, indent=2)
              
              print(f"成功更新 {LATEST_POSTS_PATH}")
              
              return True
          
          def main():
              """主函數"""
              print("開始掃描部落格文章...")
              posts = scan_blog_directory()
              
              if posts:
                  print(f"找到 {len(posts)} 篇文章")
                  update_json_files(posts)
              else:
                  print("未找到任何文章，創建空的JSON文件")
                  update_json_files([])
          
          if __name__ == "__main__":
              main()
          EOF
          
          # 執行腳本
          python scan_html_files.py
          
          # 提交更改
          git add assets/data/blog-posts.json assets/data/latest-posts.json
          git commit -m "掃描現有HTML文件並更新JSON" || echo "無需提交"
          git push || echo "無需推送"
      
      # 處理Word文檔 (如果啟用)
      - name: 處理Word文檔
        if: ${{ github.event_name == 'push' || github.event.inputs.process_word == 'true' }}
        run: |
          if [ -d "word-docs" ] && [ "$(ls -A word-docs)" ]; then
            # 複製word_to_html.py腳本到當前目錄
            if [ -f ".github/scripts/word_to_html.py" ]; then
              cp .github/scripts/word_to_html.py ./
            elif [ -f ".github/workflows/word_to_html.py" ]; then
              cp .github/workflows/word_to_html.py ./
            fi
            
            # 運行Python腳本處理Word文檔
            if [ -f "word_to_html.py" ]; then
              python word_to_html.py word-docs blog
            else
              echo "找不到word_to_html.py腳本"
              exit 1
            fi
          else
            echo "word-docs 目錄為空或不存在，跳過處理"
          fi
      
      # 檢測已刪除的HTML文件
      - name: 檢測已刪除的HTML文件
        id: check_deleted
        if: ${{ github.event_name == 'delete' || github.event.inputs.handle_deletion == 'true' }}
        run: |
          # 獲取已刪除的HTML文件列表
          git diff --name-only --diff-filter=D HEAD~1 HEAD | grep -E '^blog/.*\.html$' > deleted_files.txt || true
          
          # 檢查是否有文件被刪除
          if [ -s deleted_files.txt ]; then
            echo "檢測到以下HTML文件已被刪除:"
            cat deleted_files.txt
            echo "html_deleted=true" >> $GITHUB_OUTPUT
          else
            echo "沒有HTML文件被刪除"
            echo "html_deleted=false" >> $GITHUB_OUTPUT
          fi
      
      # 提交生成的HTML文件
      - name: 提交生成的HTML文件
        id: commit-html
        if: ${{ github.event_name == 'push' || github.event.inputs.process_word == 'true' }}
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add blog/
          
          if git diff --staged --quiet; then
            echo "沒有新的HTML文件需要提交"
            echo "html_changed=false" >> $GITHUB_OUTPUT
          else
            git commit -m "自動將Word文檔轉換為HTML"
            git push
            echo "html_changed=true" >> $GITHUB_OUTPUT
          fi
      
      # 更新博客JSON文件
      - name: 更新博客JSON文件
        id: update_blog_json
        if: ${{ steps.commit-html.outputs.html_changed == 'true' || github.event.inputs.update_json == 'true' || github.event_name == 'schedule' || steps.check_deleted.outputs.html_deleted == 'true' }}
        run: |
          # 複製update_blog_posts.py腳本到當前目錄
          if [ -f ".github/scripts/update_blog_posts.py" ]; then
            cp .github/scripts/update_blog_posts.py ./
          elif [ -f ".github/workflows/update_blog_posts.py" ]; then
            cp .github/workflows/update_blog_posts.py ./
          fi
          
          # 運行Python腳本更新JSON
          if [ -f "update_blog_posts.py" ]; then
            python update_blog_posts.py
            echo "blog_json_updated=true" >> $GITHUB_OUTPUT
          else
            echo "找不到update_blog_posts.py腳本"
            exit 1
          fi
        env:
          GH_PAT: ${{ secrets.GITHUB_TOKEN }}
      
      # 處理影片JSON更新
      - name: 檢查影片JSON更新
        id: check_videos
        run: |
          if [ "${{ github.event.inputs.update_videos }}" == "true" ] || git diff --name-only HEAD~1 HEAD | grep -q "assets/data/videos.json"; then
            echo "videos_changed=true" >> $GITHUB_OUTPUT
          else
            echo "videos_changed=false" >> $GITHUB_OUTPUT
          fi
      
      # 提交更新的JSON文件
      - name: 提交更新的JSON文件
        if: ${{ steps.update_blog_json.outputs.blog_json_updated == 'true' || steps.check_videos.outputs.videos_changed == 'true' || steps.init_json.outputs.scan_html == 'true' }}
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add assets/data/blog-posts.json
          git add assets/data/videos.json
          git add assets/data/latest-posts.json
          
          if git diff --staged --quiet; then
            echo "沒有JSON文件變更需要提交"
          else
            git commit -m "更新博客與影片JSON數據"
            git push
          fi
      
      # 清理Word文檔（可選，將處理過的Word文檔移動到processed目錄）
      - name: 清理已處理的Word文檔
        if: ${{ github.event_name == 'push' && steps.commit-html.outputs.html_changed == 'true' }}
        run: |
          # 移動已處理的文件到processed目錄
          mkdir -p word-docs/processed
          find word-docs -maxdepth 1 -type f -name "*.docx" -exec mv {} word-docs/processed/ \;
          
          # 提交更改
          git add word-docs/
          git commit -m "移動已處理的Word文檔" || echo "無需提交"
          git push || echo "無需推送"